# DORA Compliance Agent Communication Configuration
# This file provides configuration examples for different environments and use cases

# Development Environment Configuration
development:
  # Agent identification
  agent_id: "policy-analyzer-dev-001"
  agent_type: "policy_analyzer"
  instance_id: "dev-instance-001"
  version: "1.0.0"
  
  # Transport protocol configurations
  transports:
    # HTTP/REST transport for synchronous communication
    http:
      enabled: true
      host: "0.0.0.0"
      port: 8080
      tls: false
      timeout: 30
      max_connections: 100
      keepalive_timeout: 30
      
    # Kafka transport for asynchronous messaging
    kafka:
      enabled: true
      brokers: 
        - "localhost:9092"
      group_id: "dora-agents-dev"
      topic_prefix: "dev-agent"
      compression_type: "snappy"
      acks: "all"
      retries: 3
      batch_size: 16384
      linger_ms: 5
      auto_offset_reset: "earliest"
      enable_auto_commit: false
      session_timeout_ms: 30000
      
    # WebSocket transport for real-time communication
    websocket:
      enabled: false
      host: "0.0.0.0"
      port: 8081
      path: "/ws"
      max_connections: 50
      
    # AMQP transport for reliable messaging
    amqp:
      enabled: false
      url: "amqp://localhost:5672"
      exchange: "dora-agents"
      queue_prefix: "agent"
      durable: true
      auto_delete: false
  
  # Security configuration (minimal for development)
  security:
    encryption: false
    signing: false
    authentication: false
    encryption_key: null
    signing_key: "dev-signing-key-2024"
    jwt_secret: "dev-jwt-secret-2024"
    token_expiry: 3600  # 1 hour
    
  # Retry and error handling policies
  retry_policies:
    default:
      max_attempts: 3
      initial_delay: 1.0
      max_delay: 60.0
      backoff_multiplier: 2.0
      jitter: true
      
    critical_task:
      max_attempts: 5
      initial_delay: 0.5
      max_delay: 30.0
      backoff_multiplier: 1.5
      
    heartbeat:
      max_attempts: 2
      initial_delay: 5.0
      max_delay: 10.0
      backoff_multiplier: 1.0
      
  # Circuit breaker configuration
  circuit_breaker:
    failure_threshold: 5
    success_threshold: 3
    timeout: 60
    monitoring_period: 30
    
  # Message batching configuration
  batching:
    enabled: false
    max_batch_size: 10
    max_wait_time: 1000  # milliseconds
    batch_timeout: 5000
    compression: false
    
  # Monitoring and observability
  monitoring:
    metrics_enabled: true
    tracing_enabled: true
    prometheus_port: 9090
    jaeger_endpoint: "http://localhost:14268/api/traces"
    log_level: "INFO"
    
  # Performance tuning
  performance:
    connection_pool_size: 10
    max_message_size: "10MB"
    buffer_size: 8192
    worker_threads: 4

---

# Staging Environment Configuration
staging:
  # Agent identification
  agent_id: "policy-analyzer-staging-001"
  agent_type: "policy_analyzer"
  instance_id: "staging-instance-001"
  version: "1.0.0"
  
  # Transport protocol configurations
  transports:
    # HTTP/REST with TLS
    http:
      enabled: true
      host: "0.0.0.0"
      port: 443
      tls: true
      cert_file: "/etc/certs/tls.crt"
      key_file: "/etc/certs/tls.key"
      timeout: 30
      max_connections: 200
      keepalive_timeout: 60
      
    # Kafka cluster configuration
    kafka:
      enabled: true
      brokers:
        - "kafka-1.dora-staging.svc.cluster.local:9092"
        - "kafka-2.dora-staging.svc.cluster.local:9092"
        - "kafka-3.dora-staging.svc.cluster.local:9092"
      group_id: "dora-agents-staging"
      topic_prefix: "staging-agent"
      compression_type: "snappy"
      acks: "all"
      retries: 5
      batch_size: 32768
      linger_ms: 10
      security_protocol: "SASL_SSL"
      sasl_mechanism: "PLAIN"
      sasl_username: "${KAFKA_USERNAME}"
      sasl_password: "${KAFKA_PASSWORD}"
      
    # WebSocket with authentication
    websocket:
      enabled: true
      host: "0.0.0.0"
      port: 8081
      path: "/ws"
      max_connections: 100
      tls: true
      cert_file: "/etc/certs/ws-tls.crt"
      key_file: "/etc/certs/ws-tls.key"
      
  # Enhanced security for staging
  security:
    encryption: true
    signing: true
    authentication: true
    encryption_key: "${ENCRYPTION_KEY}"
    signing_key: "${SIGNING_KEY}"
    jwt_secret: "${JWT_SECRET}"
    token_expiry: 1800  # 30 minutes
    vault_address: "https://vault.dora-staging.svc.cluster.local:8200"
    vault_token: "${VAULT_TOKEN}"
    
  # Stricter retry policies
  retry_policies:
    default:
      max_attempts: 5
      initial_delay: 1.0
      max_delay: 120.0
      backoff_multiplier: 2.0
      jitter: true
      
    critical_task:
      max_attempts: 7
      initial_delay: 0.5
      max_delay: 60.0
      backoff_multiplier: 1.5
      
  # Circuit breaker for resilience
  circuit_breaker:
    failure_threshold: 3
    success_threshold: 5
    timeout: 120
    monitoring_period: 60
    
  # Message batching for performance
  batching:
    enabled: true
    max_batch_size: 50
    max_wait_time: 2000
    batch_timeout: 10000
    compression: true
    
  # Comprehensive monitoring
  monitoring:
    metrics_enabled: true
    tracing_enabled: true
    prometheus_port: 9090
    jaeger_endpoint: "http://jaeger.dora-staging.svc.cluster.local:14268/api/traces"
    log_level: "INFO"
    audit_logging: true
    
  # Performance optimization
  performance:
    connection_pool_size: 20
    max_message_size: "50MB"
    buffer_size: 16384
    worker_threads: 8

---

# Production Environment Configuration
production:
  # Agent identification
  agent_id: "${AGENT_ID}"
  agent_type: "${AGENT_TYPE}"
  instance_id: "${INSTANCE_ID}"
  version: "1.0.0"
  
  # Transport protocol configurations
  transports:
    # Production HTTP with full TLS
    http:
      enabled: true
      host: "0.0.0.0"
      port: 443
      tls: true
      cert_file: "/etc/certs/tls.crt"
      key_file: "/etc/certs/tls.key"
      ca_file: "/etc/certs/ca.crt"
      timeout: 60
      max_connections: 1000
      keepalive_timeout: 120
      rate_limit:
        requests_per_second: 1000
        burst_size: 100
        
    # Production Kafka cluster
    kafka:
      enabled: true
      brokers:
        - "kafka-1.dora-prod.svc.cluster.local:9092"
        - "kafka-2.dora-prod.svc.cluster.local:9092" 
        - "kafka-3.dora-prod.svc.cluster.local:9092"
        - "kafka-4.dora-prod.svc.cluster.local:9092"
        - "kafka-5.dora-prod.svc.cluster.local:9092"
      group_id: "dora-agents-prod"
      topic_prefix: "prod-agent"
      compression_type: "lz4"
      acks: "all"
      retries: 10
      batch_size: 65536
      linger_ms: 20
      security_protocol: "SASL_SSL"
      sasl_mechanism: "SCRAM-SHA-512"
      sasl_username: "${KAFKA_USERNAME}"
      sasl_password: "${KAFKA_PASSWORD}"
      ssl_ca_location: "/etc/kafka/certs/ca.pem"
      ssl_certificate_location: "/etc/kafka/certs/client.pem"
      ssl_key_location: "/etc/kafka/certs/client-key.pem"
      
    # gRPC for high-performance communication
    grpc:
      enabled: true
      host: "0.0.0.0"
      port: 9090
      tls: true
      cert_file: "/etc/certs/grpc-tls.crt"
      key_file: "/etc/certs/grpc-tls.key"
      max_connections: 500
      max_message_size: "100MB"
      compression: "gzip"
      
    # WebSocket for real-time updates
    websocket:
      enabled: true
      host: "0.0.0.0"
      port: 8081
      path: "/ws"
      max_connections: 2000
      tls: true
      cert_file: "/etc/certs/ws-tls.crt"
      key_file: "/etc/certs/ws-tls.key"
      heartbeat_interval: 30
      
  # Production-grade security
  security:
    encryption: true
    signing: true
    authentication: true
    authorization: true
    encryption_algorithm: "AES-256-GCM"
    signing_algorithm: "HMAC-SHA256"
    encryption_key: "${ENCRYPTION_KEY}"
    signing_key: "${SIGNING_KEY}"
    jwt_secret: "${JWT_SECRET}"
    token_expiry: 900  # 15 minutes
    refresh_token_expiry: 86400  # 24 hours
    vault_address: "https://vault.dora-prod.svc.cluster.local:8200"
    vault_token: "${VAULT_TOKEN}"
    mTLS_enabled: true
    certificate_rotation: true
    
  # Production retry policies
  retry_policies:
    default:
      max_attempts: 10
      initial_delay: 2.0
      max_delay: 300.0
      backoff_multiplier: 2.0
      jitter: true
      
    critical_task:
      max_attempts: 15
      initial_delay: 1.0
      max_delay: 180.0
      backoff_multiplier: 1.8
      
    heartbeat:
      max_attempts: 3
      initial_delay: 10.0
      max_delay: 30.0
      backoff_multiplier: 1.5
      
  # Robust circuit breaker
  circuit_breaker:
    failure_threshold: 5
    success_threshold: 10
    timeout: 300
    monitoring_period: 120
    half_open_max_calls: 5
    
  # Optimized message batching
  batching:
    enabled: true
    max_batch_size: 1000
    max_wait_time: 5000
    batch_timeout: 30000
    compression: true
    compression_algorithm: "lz4"
    
  # Comprehensive monitoring and observability
  monitoring:
    metrics_enabled: true
    tracing_enabled: true
    prometheus_port: 9090
    prometheus_path: "/metrics"
    jaeger_endpoint: "http://jaeger.dora-prod.svc.cluster.local:14268/api/traces"
    log_level: "WARN"
    audit_logging: true
    structured_logging: true
    log_retention_days: 90
    metrics_retention_days: 365
    
    # Custom metrics
    custom_metrics:
      - name: "dora_compliance_score"
        type: "gauge"
        help: "Current DORA compliance score"
        labels: ["organization", "framework"]
        
      - name: "agent_task_duration"
        type: "histogram" 
        help: "Agent task execution duration"
        labels: ["agent_type", "task_type"]
        buckets: [0.1, 0.5, 1.0, 2.5, 5.0, 10.0]
        
  # High-performance configuration
  performance:
    connection_pool_size: 100
    max_message_size: "100MB"
    buffer_size: 65536
    worker_threads: 16
    io_threads: 8
    prefetch_count: 1000
    
    # Resource limits
    max_memory_usage: "2GB"
    max_cpu_usage: "2000m"
    max_disk_usage: "10GB"
    
    # Caching configuration
    cache:
      enabled: true
      type: "redis"
      url: "redis://redis-cluster.dora-prod.svc.cluster.local:6379"
      max_connections: 50
      ttl: 3600
      
  # Dead letter queue configuration
  dead_letter_queue:
    enabled: true
    max_retries: 5
    retention_period: "7d"
    analysis_enabled: true
    auto_replay: false
    escalation:
      - condition: "retry_count > 5"
        action: "notify_ops"
        webhook: "https://ops.company.com/alerts"
      - condition: "age > 1h"
        action: "escalate_management"
        email: "management@company.com"
        
  # Health check configuration
  health_checks:
    enabled: true
    interval: 30
    timeout: 10
    http_endpoint: "/health"
    checks:
      - name: "database_connectivity"
        type: "postgres"
        connection_string: "${DATABASE_URL}"
      - name: "kafka_connectivity"
        type: "kafka"
        brokers: "${KAFKA_BROKERS}"
      - name: "redis_connectivity"
        type: "redis" 
        url: "${REDIS_URL}"

---

# High-Availability Configuration
high_availability:
  # Load balancing configuration
  load_balancer:
    enabled: true
    algorithm: "round_robin"  # round_robin, least_connections, weighted
    health_check_interval: 30
    unhealthy_threshold: 3
    healthy_threshold: 2
    
  # Failover configuration
  failover:
    enabled: true
    detection_timeout: 30
    recovery_timeout: 300
    max_failover_attempts: 3
    
  # Clustering configuration
  cluster:
    enabled: true
    discovery_method: "kubernetes"  # kubernetes, consul, etcd
    cluster_name: "dora-agents-prod"
    node_id: "${NODE_ID}"
    
  # Backup and recovery
  backup:
    enabled: true
    interval: "1h"
    retention: "30d"
    storage: "s3://dora-backups/agents/"
    encryption: true

---

# Kubernetes-specific Configuration
kubernetes:
  # Service mesh integration
  service_mesh:
    enabled: true
    type: "istio"
    mtls_mode: "STRICT"
    
  # Pod security
  security_context:
    run_as_non_root: true
    run_as_user: 10001
    fs_group: 10001
    capabilities:
      drop: ["ALL"]
      
  # Resource requests and limits
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "2000m"
      memory: "4Gi"
      
  # Probes
  probes:
    liveness:
      http_get:
        path: "/health"
        port: 8080
      initial_delay_seconds: 30
      period_seconds: 10
      timeout_seconds: 5
      failure_threshold: 3
      
    readiness:
      http_get:
        path: "/ready"
        port: 8080
      initial_delay_seconds: 10
      period_seconds: 5
      timeout_seconds: 3
      failure_threshold: 3 